# -*- coding: utf-8 -*-
"""VirtualTry_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/144OyUXwBbpv-3m_dR80IsEXhrXu2d_EY
"""

import cv2
import numpy as np
# from google.colab.patches import cv2_imshow
from PIL import Image as im
from PIL import ImageDraw

d_image = cv2.imread('pink1.png')


# convert to LAB color space
lab = cv2.cvtColor(d_image, cv2.COLOR_BGR2LAB)

# A-channel
# cv2_imshow(lab[:,:,1])

th = cv2.threshold(lab[:,:,1],127,255,cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
data = im.fromarray(th)
data.save('th.png')
img = im.open("th.png")
 
img1 = img.convert("RGB") # Converting the image to RGB mode
seed = (1025, 865) # Coordinates of the pixel whose value would be used as seed  
rep_value = (0, 255, 0) # Pixel Value which would be used for replacement

  
# Calling the floodfill() function and passing it image, seed, value and thresh as arguments
ImageDraw.floodfill(img1, seed, rep_value, thresh=50)
img1.save('ff.png')

frame = cv2.imread('ff.png')
frame1 = cv2.imread('pink1.png')
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

# define range of green color in HSV
lower_green = np.array([25, 52, 72])
upper_green = np.array([102, 255, 255])
# Threshold the HSV image to get only blue colors
mask_white = cv2.inRange(hsv,lower_green, upper_green)
mask_black = cv2.bitwise_not(mask_white)

#converting mask_black to 3 channels
W,L = mask_black.shape
mask_black_3CH = np.empty((W, L, 3), dtype=np.uint8)
mask_black_3CH[:, :, 0] = mask_black
mask_black_3CH[:, :, 1] = mask_black
mask_black_3CH[:, :, 2] = mask_black
# cv2_imshow(frame1)
# cv2_imshow(frame) #1
print(" ")
# cv2_imshow(mask_black_3CH) #2
print(" ")

dst3 = cv2.bitwise_and(mask_black_3CH,frame1)
# cv2_imshow(dst3) #3
print(" ")

W,L = mask_white.shape
mask_white_3CH = np.empty((W, L, 3), dtype=np.uint8)
mask_white_3CH[:, :, 0] = mask_white
mask_white_3CH[:, :, 1] = mask_white
mask_white_3CH[:, :, 2] = mask_white

# cv2_imshow(mask_white_3CH) #4
print(" ")
dst3_wh = cv2.bitwise_or(mask_white_3CH,dst3)
# cv2_imshow(dst3_wh)
print(" ")

# changing for design
design = cv2.imread('shirt.png')
print(" ")
design = cv2.resize(design, mask_black.shape[1::-1]) #imp
# cv2_imshow(design) #5
print(" ")

design_mask_mixed = cv2.bitwise_or(mask_black_3CH,design)
# cv2_imshow(design_mask_mixed) #6
print(" ")

final_mask_black_3CH = cv2.bitwise_and(design_mask_mixed,dst3_wh)
# cv2_imshow(final_mask_black_3CH) #7
print(" ")


# cv2.waitKey()

# First image
# cv2_imshow(frame1)

# shirt
# cv2_imshow(design)

# Final output
# cv2_imshow(final_mask_black_3CH)

cv2.imwrite('finalImage.png',final_mask_black_3CH)